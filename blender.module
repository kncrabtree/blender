<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_theme().
 */
function blender_theme($existing, $type, $theme, $path) {
  $variables = array(
    'blender' => array(
      'variables' => array(
        'articles' => NULL,
        'more' => NULL,
        'page' => 'inbox',
        'inbox_new' => 0,
        'recommend_new' => 0,
      ),
      'template' => 'blender',
    ),
    'blender-article' => array(
      'variables' => array(
        'articles' => NULL,
      ),
      'template' => 'blender-article',
    ),
    'blender-comment' => array(
      'variables' => array(
        'comments' => NULL,
      ),
      'template' => 'blender-comment',
    ),
  );
  return $variables;
}

/**
 * Implements hook_cron().
 */
function blender_cron() {

  $queue = \Drupal::queue('journal_fetcher');

  if($queue->numberOfItems() > 0)
  {
    \Drupal::logger('blender')->notice("Not queuing more journals; queue not empty.");
    return;
  }

  $storage = \Drupal::entityTypeManager()->getStorage('blender_journal');
  $jids = \Drupal::entityQuery('blender_journal')
    ->condition('active', TRUE)
    ->condition('last_update',\Drupal::time()->getRequestTime()-(24*60*60),'<')
    ->execute();

  $journals = $storage->loadMultiple($jids);


  foreach( $journals as $j ) {
    if($queue->createItem($j))
    {
      \Drupal::logger('blender')->notice("Queued ".$j->abbr->value);
    }
  }

  //purge articles more than 180 days old that are not starred or preserved
  $a_ids = \Drupal::entityQuery('blender_article')
    ->condition('is_starred',0)
    ->condition('date_added',\Drupal::time()->getRequestTime()-(24*60*60*180),'<')
    ->condition('preserve',0)
    ->execute();


  $articles = \Drupal::entityTypeManager()->getStorage('blender_article')->loadMultiple($a_ids);
  foreach($articles as $a)
    $a->delete();

  \Drupal::logger('blender')->notice("Deleted ".count($a_ids)." old articles.");


  //see if any articles have been starred within the last week
  $ts_res = \Drupal::entityQuery('blender_article')
    ->condition('is_starred',1)
    ->condition('star_date',\Drupal::time()->getRequestTime()-(24*60*60*7),'>')
    ->count()->execute();

  //if no articles have been starred in the past week, it's time to look for new ones to star.
  //query votes table; filter by article.is_starred=false and #votes > 1, aggregate on count, sort descending
  if($ts_res == 0)
  {
    \Drupal::logger('blender')->notice("Looking for potential articles to star.");
    $candidates = \Drupal::entityTypeManager()->getStorage('blender_vote')->getAggregateQuery()
      ->aggregate('article_id','count')
      ->condition('article_id.entity:blender_article.is_starred',0)
      ->conditionAggregate('article_id','COUNT',1,'>')
      ->groupBy('article_id')
      ->sortAggregate('article_id','count','DESC')
      ->range(0,2)->execute();


    \Drupal::logger('blender')->notice("Found ".count($candidates)." articles to star.");

    if(count($candidates) > 0)
    {
      $offset = 0;
      $timestamp = \Drupal::time()->getRequestTime();
      foreach($candidates as $c)
      {

        //Debugging statements
//         $str = "";
//         foreach($c as $key=>$value)
//           $str .= ' '.$key.': '.$value.', ';
//         \Drupal::logger('blender')->notice($str);

        ///TODO: if selecting 2 articles, make timestamps 1 second different
        $a = \Drupal::entityTypeManager()->getStorage('blender_article')->load($c['article_id']);
        $a->set('is_starred',true);
        $a->set('star_date',$timestamp+$offset);
        $a->set('preserve',true);
        $a->save();

        $slack['attachments'][] = [
          "title" => $a->get('title')->value,
          "color" => "#FFAF1D",
          "fields" => [
            [
              "title" => "Assigned to",
              "value" => $a->get('user_id')->entity->getDisplayName(),
              "short" => true,
            ],
            [
              "title" => "Journal",
              "value" => $a->get('journal_id')->entity->get('abbr')->value,
              "short" => true,
            ],
            [
              "title" => "Total Votes",
              "value" => $c['article_id_count'],
              "short" => true,
            ],
          ],
          "actions" => [
            [
              "type" => "button",
              "text" => "View Abstract",
              "url" => 'http://dx.doi.org/'.$a->get('doi')->value,
            ],
            [
              "type" => "button",
              "text" => "Open in Blender",
              "url" => \Drupal\Core\Url::fromRoute('blender.blender_article.canonical',[ 'blender_article' => $a->get('id')->value, ],[ 'absolute' => true, ])->toString(),
            ],
          ],
        ];

        $offset++;
      }

      //post to slack
      $config = \Drupal::config('blender-slack.settings');
      if($config->get('blender-slack.enabled'))
      {
        $slack['channel'] = $config->get('blender-slack.channel');
        $txt = 'The following article';
        if(count($candidates) > 1)
          $txt.= 's have ';
        else
          $txt.= ' has ';
        $txt.='been selected for discussion at the next group meeting.';
        $slack['text'] = $txt;

        $url = 'https://slack.com/api/chat.postMessage';
        $headers['Content-type'] = 'application/json';
        $headers['Authorization'] = 'Bearer '.$config->get('blender-slack.workspace-token');

        $response = \Drupal::httpClient()->request('POST',$url, [
          'headers' => $headers,
          'body' => json_encode($slack)
        ]);

        if($response->getStatusCode() != 200)
        {
          \Drupal::logger('blender')->warning("Received error code ".$response->getStatusCode()," when posting starred articles to Slack (url = ".$url.").");
        }
      }

    }
  }

}

/**
* Implements hook_entity_base_field_info().
*/
function blender_entity_base_field_info(EntityTypeInterface $entity_type)
{
  if($entity_type->id() === 'user') {
    $fields['slack_id'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Slack ID'))
      ->setDescription(t('Slack ID for this user (e.g., U0XAXAA8L)'))
      ->setRevisionable(TRUE)
      ->setSettings( array (
        'default_value' => '',
        'max_length' => 9
      ))
      ->setDisplayOptions('view', array( 'type' => 'string', 'weight' => -6 ))
      ->setDisplayOptions('form', array( 'type' => 'string_text_field', 'weight' => -6))
      ->setDisplayConfigurable('form',TRUE)
      ->setDisplayConfigurable('view',TRUE);

    return $fields;
  }

}



